//----------------------------------------------------------------------------------------
//
//	siv::PerlinNoise
//	
//	Copyright (c) 2021 Ryo Suzuki <reputeless@gmail.com>
//	Distributed under the Boost Software License, Version 1.0.
//
//	Boost Software License - Version 1.0 - August 17th, 2003
//
//	Permission is hereby granted, free of charge, to any person or organization
//	obtaining a copy of the software and accompanying documentation covered by
//	this license(the "Software") to use, reproduce, display, distribute,
//	execute, and transmit the Software, and to prepare derivative works of the
//	Software, and to permit third - parties to whom the Software is furnished to
//	do so, all subject to the following :
//
//	The copyright notices in the Softwareand this entire statement, including
//	the above license grant, this restrictionand the following disclaimer,
//	must be included in all copies of the Software, in whole or in part, and
//	all derivative works of the Software, unless such copies or derivative
//	works are solely in the form of machine - executable object code generated by
//	a source language processor.
//
//	THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//	IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//	FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON - INFRINGEMENT.IN NO EVENT
//	SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
//	FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
//	ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
//	DEALINGS IN THE SOFTWARE.
//
//----------------------------------------------------------------------------------------

# pragma once

namespace siv
{
	template <class Tag>
	struct YesNo
	{
	private:

		bool m_yesNo;

		struct Helper
		{
			bool yesNo;
		};

	public:

		[[nodiscard]]
		explicit constexpr YesNo(bool yesNo) noexcept
			: m_yesNo{ yesNo } {}

		[[nodiscard]]
		constexpr YesNo(Helper helper) noexcept
			: m_yesNo{ helper.yesNo } {}

		[[nodiscard]]
		explicit constexpr operator bool() const noexcept
		{
			return m_yesNo;
		}

		[[nodiscard]]
		constexpr bool getBool() const noexcept
		{
			return m_yesNo;
		}

		constexpr auto operator <=>(const YesNo&) const noexcept = default;

		static constexpr Helper Yes{ true };

		static constexpr Helper No{ false };
	};
}
